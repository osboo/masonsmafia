// Generated by CoffeeScript 2.2.3
(function() {
  var Sequelize, buildModels, chai, chaiAsPromised, constants, db, moment, rebuildCache, should;

  chai = require("chai");

  chaiAsPromised = require("chai-as-promised");

  should = require('chai').should();

  chai.use(chaiAsPromised);

  moment = require('moment');

  Sequelize = require('sequelize');

  constants = require('./../src/server/models/constants');

  db = require('./../src/server/models/db');

  buildModels = require('./../src/server/models/BuildModels');

  rebuildCache = require('./../src/server/models/RebuildCache');

  if (process.env.MASONS_ENV === 'TEST') {
    describe('models/db object', function() {
      it('should contain sequelize object', function() {
        return db.should.have.property('sequelize');
      });
      it('should contain Player model', function() {
        return db.should.have.property('Player');
      });
      it('should contain Game model', function() {
        return db.should.have.property('Game');
      });
      return it('should contain PlayerGame model', function() {
        return db.should.have.property('PlayerGame');
      });
    });
    describe('Test games', function() {
      beforeEach(async function() {
        var err;
        try {
          return (await db.sequelize.sync({
            force: true
          }));
        } catch (error) {
          err = error;
          console.error(err);
          return should.not.exist(err);
        }
      });
      describe('Player model', function() {
        it('should not save player if name is empty', function() {
          return db.Player.create({}).should.eventually.be.rejected;
        });
        return it('should save user if only name is provided', async function() {
          var foundPlayer, savedPlayer;
          savedPlayer = (await db.Player.create({
            name: 'Borland'
          }));
          savedPlayer.name.should.be.eql('Borland');
          foundPlayer = (await db.Player.find({
            where: {
              name: 'Borland'
            }
          }));
          foundPlayer.name.should.be.eql(savedPlayer.name);
          should.not.exist(foundPlayer.vk_id);
          should.not.exist(savedPlayer.vk_id);
          return foundPlayer.service_role.should.be.eql(savedPlayer.service_role);
        });
      });
      describe('Game model', function() {
        it('should not save game without date', function() {
          return db.Game.create({}).should.eventually.be.rejected;
        });
        return it('should not save game with missing result', function() {
          return db.Game.create({
            date: moment().format('YYYY-MM-DD')
          }).should.eventually.be.rejected;
        });
      });
      describe('/models/BuildModels', function() {
        return describe('game3-2014-03-10', function() {
          var checkRole, models, paper;
          paper = require('./TestGame').game_10_03[0];
          models = {};
          it('should build all db models with no problems', async function() {
            var err;
            try {
              return models = (await buildModels(paper));
            } catch (error) {
              err = error;
              return should.not.exist(err);
            }
          });
          it('should take a place at 2014-03-10', function() {
            var gameObj;
            gameObj = models.Game;
            return moment(gameObj.date).format('YYYY-MM-DD').should.be.eql('2014-03-10');
          });
          it('should have kazzantip be a referee', function() {
            var gameObj;
            gameObj = models.Game;
            return gameObj.referee.should.be.eql('kazzantip');
          });
          it('should have mafia as a winner', function() {
            var gameObj;
            gameObj = models.Game;
            return gameObj.result.should.be.eql(constants.GAME_RESULT.MAFIA_WIN);
          });
          it('should contain 10 players', function() {
            var playerGames, players;
            playerGames = models.PlayerGames;
            playerGames.should.have.property('length', 10);
            players = models.Players;
            return players.should.have.property('length', 10);
          });
          it('should have Катафалк as sheriff', async function() {
            var err, gameID, player, playerGame, playerId;
            try {
              models = (await buildModels(paper));
              gameID = models.Game.id;
              player = (await db.Player.find({
                where: {
                  name: 'Катафалк'
                }
              }));
              playerId = player.id;
              playerGame = (await db.PlayerGame.find({
                where: [`PlayerId=${playerId} and GameId=${gameID}`]
              }));
              return playerGame.role.should.be.eql(constants.PLAYER_ROLES.SHERIFF);
            } catch (error) {
              err = error;
              return should.not.exist(err);
            }
          });
          checkRole = async function(name, role, dbmodels) {
            var gameID, player, playerGame, playerId;
            models = dbmodels;
            gameID = models.Game.id;
            player = (await db.Player.find({
              where: {
                name: name
              }
            }));
            playerId = player.id;
            playerGame = (await db.PlayerGame.find({
              where: [`PlayerId=${playerId} and GameId=${gameID}`]
            }));
            return playerGame.role.should.be.eql(role);
          };
          it('should have Агрессор as a don', async function() {
            models = (await buildModels(paper));
            return checkRole('Агрессор', constants.PLAYER_ROLES.DON, models);
          });
          it('should have FrankLin as a mafia', async function() {
            models = (await buildModels(paper));
            return checkRole('FrankLin', constants.PLAYER_ROLES.MAFIA, models);
          });
          it('should have Кошка as a mafia', async function() {
            models = (await buildModels(paper));
            return checkRole('Кошка', constants.PLAYER_ROLES.MAFIA, models);
          });
          it('should have Малика without likes', async function() {
            var gameID, player, playerGame, playerId;
            models = (await buildModels(paper));
            gameID = models.Game.id;
            player = (await db.Player.find({
              where: {
                name: 'Малика'
              }
            }));
            playerId = player.id;
            playerGame = (await db.PlayerGame.find({
              where: [`PlayerId=${playerId} and GameId=${gameID}`]
            }));
            playerGame.likes.should.be.eql(0);
            return playerGame.fouls.should.be.eql(1);
          });
          it('should have Рон`s best move with accuracy 2', async function() {
            var gameID, player, playerGame, playerId;
            models = (await buildModels(paper));
            gameID = models.Game.id;
            player = (await db.Player.find({
              where: {
                name: 'Рон'
              }
            }));
            playerId = player.id;
            playerGame = (await db.PlayerGame.find({
              where: [`PlayerId=${playerId} and GameId=${gameID}`]
            }));
            playerGame.took_best_move.should.be.eql(true);
            return playerGame.best_move_accuracy.should.be.eql(2);
          });
          it('should have Рон killed at first night', async function() {
            var gameID, player, playerGame, playerId;
            models = (await buildModels(paper));
            gameID = models.Game.id;
            player = (await db.Player.find({
              where: {
                name: 'Рон'
              }
            }));
            playerId = player.id;
            playerGame = (await db.PlayerGame.find({
              where: [`PlayerId=${playerId} and GameId=${gameID}`]
            }));
            return playerGame.is_killed_first_at_night.should.be.eql(true);
          });
          it('should have FrankLin, Хедин and Кошка as the best players', async function() {
            var gameID, i, len, player, playerGame, playerGames, players, results;
            models = (await buildModels(paper));
            gameID = models.Game.id;
            players = [];
            ['FrankLin', 'Хедин', 'Кошка'].forEach(async function(playerName) {
              var player;
              player = (await db.Player.find({
                where: {
                  name: playerName
                }
              }));
              return players.push(player);
            });
            playerGames = (await (async function() {
              var i, len, results;
              results = [];
              for (i = 0, len = players.length; i < len; i++) {
                player = players[i];
                results.push((await db.PlayerGame.find({
                  where: [`PlayerId=${player.id} and GameId=${gameID}`]
                })));
              }
              return results;
            })());
            results = [];
            for (i = 0, len = playerGames.length; i < len; i++) {
              playerGame = playerGames[i];
              results.push(playerGame.is_best.should.be.eql(true));
            }
            return results;
          });
          it('should have FrankLin, Хедин and Кошка as players with 0.5 extra scores', async function() {
            var gameID, i, len, player, playerGame, playerGames, players, results;
            models = (await buildModels(paper));
            gameID = models.Game.id;
            players = [];
            ['FrankLin', 'Хедин', 'Кошка'].forEach(async function(playerName) {
              var player;
              player = (await db.Player.find({
                where: {
                  name: playerName
                }
              }));
              return players.push(player);
            });
            playerGames = (await (async function() {
              var i, len, results;
              results = [];
              for (i = 0, len = players.length; i < len; i++) {
                player = players[i];
                results.push((await db.PlayerGame.find({
                  where: [`PlayerId=${player.id} and GameId=${gameID}`]
                })));
              }
              return results;
            })());
            results = [];
            for (i = 0, len = playerGames.length; i < len; i++) {
              playerGame = playerGames[i];
              results.push(playerGame.extra_scores.should.be.eql(0.5));
            }
            return results;
          });
          return it('should have Марвел as a first killed by day player', async function() {
            var gameID, player, playerGame, playerId;
            models = (await buildModels(paper));
            gameID = models.Game.id;
            player = (await db.Player.find({
              where: {
                name: 'Марвел'
              }
            }));
            playerId = player.id;
            playerGame = (await db.PlayerGame.find({
              where: [`PlayerId=${playerId} and GameId=${gameID}`]
            }));
            return playerGame.is_killed_first_by_day.should.be.eql(true);
          });
        });
      });
      describe('/models/RebuildCache', function() {
        return describe('game3-2014-03-10', function() {
          var paper1;
          paper1 = require('./TestGame').game_10_03[0];
          it('should retrieve array with 10 players', async function() {
            var common, top10;
            await buildModels(paper1);
            [top10, common] = (await rebuildCache());
            return top10.should.have.length(10);
          });
          return it('should have Марвел as a first killed by day player', async function() {
            var gameID, models, player, playerGame, playerId;
            models = (await buildModels(paper1));
            gameID = models.Game.id;
            player = (await db.Player.find({
              where: {
                name: 'Марвел'
              }
            }));
            playerId = player.id;
            playerGame = (await db.PlayerGame.find({
              where: [`PlayerId=${playerId} and GameId=${gameID}`]
            }));
            return playerGame.is_killed_first_by_day.should.be.eql(true);
          });
        });
      });
      describe('game3-2014-04-10 and same synthetic: same players but another winning party', function() {
        var paper1, paper2;
        paper1 = require('./TestGame').game_10_03[0];
        paper2 = require('./TestGame').game_10_03[1];
        return it('should show that FrankLin has 2.5 average rating', async function() {
          var average, common, i, len, player, top10;
          await buildModels(paper1);
          await buildModels(paper2);
          average = 0.0;
          [top10, common] = (await rebuildCache());
          for (i = 0, len = top10.length; i < len; i++) {
            player = top10[i];
            if (player.name === "FrankLin") {
              average = player.rating / (player.gamesCitizen + player.gamesSheriff + player.gamesMafia + player.gamesDon);
              break;
            }
          }
          return average.should.be.eql(5 / 2);
        });
      });
      return describe('game 1 and game 2 at Masons Masters 16.03', function() {
        var paper1, paper2;
        paper1 = require('./TestGame').masonsMasters[0];
        paper2 = require('./TestGame').masonsMasters[1];
        it('should show that Женька-Печенька has zero extra scores per wins', async function() {
          var commonStats, i, len, p, player, top10;
          await buildModels(paper1);
          await buildModels(paper2);
          p = {};
          [top10, commonStats] = (await rebuildCache());
          for (i = 0, len = commonStats.length; i < len; i++) {
            player = commonStats[i];
            if (player.name === 'Женька-Печенька') {
              p = player;
              break;
            }
          }
          return p.extraScoresPerWin.should.be.eql(0.0);
        });
        it('should show that Озб has 3 extra scores per wins', async function() {
          var commonStats, i, len, p, player, top10;
          await buildModels(paper1);
          await buildModels(paper2);
          p = {};
          [top10, commonStats] = (await rebuildCache());
          for (i = 0, len = commonStats.length; i < len; i++) {
            player = commonStats[i];
            if (player.name === 'Озб') {
              p = player;
              break;
            }
          }
          return p.extraScoresPerWin.should.be.eql(6 / 2);
        });
        return it('should show that kors has 2 extra scores per wins', async function() {
          var commonStats, i, len, p, player, top10;
          await buildModels(paper1);
          await buildModels(paper2);
          p = {};
          [top10, commonStats] = (await rebuildCache());
          for (i = 0, len = commonStats.length; i < len; i++) {
            player = commonStats[i];
            if (player.name === 'kors') {
              p = player;
              break;
            }
          }
          return p.extraScoresPerWin.should.be.eql(2.0);
        });
      });
    });
  }

}).call(this);
