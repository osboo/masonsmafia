// Generated by CoffeeScript 2.2.3
(function() {
  let Sequelize, attemptToCreateSchema, config, createSchema, db;

  config = require('./conf')('db');

  Sequelize = require('sequelize');

  db = require('./models/db');

  createSchema = async function(db) {
    let err;
    try {
      await db.sequelize.authenticate();
      await db.sequelize.sync({
        force: true,
      });
      return console.log('Sync done');
    } catch (error) {
      err = error;
      return console.error(`Error while db sync ${err}`);
    }
  };

  attemptToCreateSchema = async function(done) {
    let err, initConnection;
    try {
      await db.sequelize.authenticate();
      console.log('Connected, creating schema..');
      createSchema(db);
      return done();
    } catch (error) {
      err = error;
      console.error(`${err}`);
      console.log('Attempt to create database and user from scratch...');
      initConnection = new Sequelize('mysql', 'root', `${process.env.MYSQL_ROOT_PASSWORD}`, {
        host: config.host,
        dialect: 'mysql',
        logging: false,
      });
      await initConnection.query(`CREATE DATABASE IF NOT EXISTS ${config.dbName};`);
      console.log(`Database ${config.dbName} created`);
      await initConnection.query(`GRANT ALL PRIVILEGES ON ${config.dbName}.* TO '${config.login}'@'%' IDENTIFIED BY '${config.password}';`);
      console.log(`User ${config.login} created`);
      await initConnection.query('FLUSH PRIVILEGES;');
      createSchema(db);
      return done();
    }
  };

  (async function() {
    let err, p;
    try {
      p = new Promise(function(resolve, reject) {
        let attempts, timerId;
        attempts = 0;
        return timerId = setInterval(async function() {
          let err;
          try {
            attempts += 1;
            await attemptToCreateSchema(resolve);
            return clearInterval(timerId);
          } catch (error) {
            err = error;
            console.log(`Failed attempt: ${err}`);
            if (attempts > 6) {
              clearInterval(timerId);
              return reject('Cannot rebuild in 60 sec');
            }
          }
        }, 10000);
      });
      return (await p);
    } catch (error) {
      err = error;
      return console.log(`${err}`);
    }
  })();
}).call(this); // eslint-disable-line no-invalid-this
