// Generated by CoffeeScript 2.2.3
(function() {
  let fs = require('fs');

  let db = require('./db');

  let GAME_RESULT = require('./constants').GAME_RESULT;

  let PLAYER_ROLES = require('./constants').PLAYER_ROLES;

  let rating = require('./rating_formula_342');

  let comparator = require('./PlayerComparatorLoader');

  rebuildCacheAsync = async function(done) {
    let cachedPlayer, chainerResults, commonStats, err, game, i, isWinner, j, k, l, len, len1, name, names, player, playerGame, playerGames, playerName, promisingWriteFiles, ref, result, top10, wins;
    try {
      playerGames = (await db.PlayerGame.all());
      chainerResults = [];
      for (j = 0, len = playerGames.length; j < len; j++) {
        playerGame = playerGames[j];
        game = (await playerGame.getGame());
        player = (await playerGame.getPlayer());
        chainerResults.push(game);
        chainerResults.push(player);
      }
      cachedPlayer = {};
      names = [];
      for (i = k = 0, ref = playerGames.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
        result = chainerResults[2 * i].result;
        playerName = chainerResults[2 * i + 1].name;
        playerGame = playerGames[i];
        if (!cachedPlayer[playerName]) {
          names.push(playerName);
          cachedPlayer[playerName] = {
            'rating': 0.0,
            'winsCitizen': 0,
            'winsSheriff': 0,
            'winsMafia': 0,
            'winsDon': 0,
            'gamesCitizen': 0,
            'gamesSheriff': 0,
            'gamesMafia': 0,
            'gamesDon': 0,
            'likes': 0,
            'bestPlayer': 0,
            'bestMoveAttempts': 0,
            'foundedMafiaOnBestMove': 0,
            'firstKilledNight': 0,
            'firstKilledDay': 0,
            'fouls': 0,
            'extraScoresPerWin': 0,
          };
        }
        isWinner = result === GAME_RESULT.CITIZENS_WIN && playerGame.role === PLAYER_ROLES.CITIZEN || result === GAME_RESULT.CITIZENS_WIN && playerGame.role === PLAYER_ROLES.SHERIFF || result === GAME_RESULT.MAFIA_WIN && playerGame.role === PLAYER_ROLES.MAFIA || result === GAME_RESULT.MAFIA_WIN && playerGame.role === PLAYER_ROLES.DON;
        cachedPlayer[playerName]['rating'] += rating(playerGame, result);
        if (result === GAME_RESULT.CITIZENS_WIN && playerGame.role === PLAYER_ROLES.CITIZEN) {
          cachedPlayer[playerName]['winsCitizen'] += 1;
        }
        if (result === GAME_RESULT.CITIZENS_WIN && playerGame.role === PLAYER_ROLES.SHERIFF) {
          cachedPlayer[playerName]['winsSheriff'] += 1;
        }
        if (result === GAME_RESULT.MAFIA_WIN && playerGame.role === PLAYER_ROLES.MAFIA) {
          cachedPlayer[playerName]['winsMafia'] += 1;
        }
        if (result === GAME_RESULT.MAFIA_WIN && playerGame.role === PLAYER_ROLES.DON) {
          cachedPlayer[playerName]['winsDon'] += 1;
        }
        if (playerGame.role === PLAYER_ROLES.CITIZEN) {
          cachedPlayer[playerName]['gamesCitizen'] += 1;
        }
        if (playerGame.role === PLAYER_ROLES.SHERIFF) {
          cachedPlayer[playerName]['gamesSheriff'] += 1;
        }
        if (playerGame.role === PLAYER_ROLES.MAFIA) {
          cachedPlayer[playerName]['gamesMafia'] += 1;
        }
        if (playerGame.role === PLAYER_ROLES.DON) {
          cachedPlayer[playerName]['gamesDon'] += 1;
        }
        cachedPlayer[playerName]['likes'] += playerGame.likes;
        if (playerGame.is_best) {
          cachedPlayer[playerName]['bestPlayer'] += 1;
        }
        if (playerGame.is_killed_first_at_night) {
          cachedPlayer[playerName]['firstKilledNight'] += 1;
        }
        if (playerGame.is_killed_first_by_day) {
          cachedPlayer[playerName]['firstKilledDay'] += 1;
        }
        cachedPlayer[playerName]['fouls'] += playerGame.fouls;
        if (playerGame.took_best_move) {
          cachedPlayer[playerName]['bestMoveAttempts'] += 1;
        }
        if (playerGame.took_best_move) {
          cachedPlayer[playerName]['foundedMafiaOnBestMove'] += playerGame.best_move_accuracy;
        }
        if (isWinner && playerGame.is_best) {
          cachedPlayer[playerName]['extraScoresPerWin'] += playerGame.extra_scores;
        }
      }
      commonStats = [];
      for (l = 0, len1 = names.length; l < len1; l++) {
        name = names[l];
        if (cachedPlayer[name]['bestMoveAttempts']) {
          cachedPlayer[name]['bestMoveAccuracy'] = cachedPlayer[name]['foundedMafiaOnBestMove'] / cachedPlayer[name]['bestMoveAttempts'];
        } else {
          cachedPlayer[name]['bestMoveAccuracy'] = 0.0;
        }
        delete cachedPlayer[name]['foundedMafiaOnBestMove'];
        delete cachedPlayer[name]['bestMoveAttempts'];
        cachedPlayer[name]['name'] = name;
        wins = cachedPlayer[name]['winsCitizen'] + cachedPlayer[name]['winsSheriff'] + cachedPlayer[name]['winsMafia'] + cachedPlayer[name]['winsDon'];
        cachedPlayer[name]['extraScoresPerWin'] = wins > 0 ? cachedPlayer[name]['extraScoresPerWin'] / wins : 0.0;
        commonStats.push(cachedPlayer[name]);
      }
      commonStats.sort(comparator);
      top10 = commonStats.length >= 10 ? commonStats.slice(-10) : commonStats;
      promisingWriteFiles = function() {
        return new Promise(function(resolve, reject) {
          return fs.writeFile(`${__dirname}/../../static/json/common_stat_responce.json`, JSON.stringify(commonStats, null, 2), function(err) {}, err ? reject(err) : fs.writeFile(`${__dirname}/../../static/json/top10.json`, JSON.stringify(top10, null, 2), async function(err) {
            let players;
            if (err) {
              return reject(err);
            } else {
              players = (await db.Player.all());
              return fs.writeFile(`${__dirname}/../../static/json/players.json`, JSON.stringify((function() {
                let len2, m, results;
                results = [];
                for (m = 0, len2 = players.length; m < len2; m++) {
                  player = players[m];
                  results.push(player.name);
                }
                return results;
              })(), null, 2), function(err) {}, err ? reject(err) : resolve({
                top10: top10,
                common: commonStats,
              }));
            }
          }));
        });
      };
      result = (await promisingWriteFiles());
      return done(null, result.top10, result.common);
    } catch (error) {
      err = error;
      return done(err, null, null);
    }
  };

  module.exports = function() {
    return new Promise(function(resolve, reject) {
      return rebuildCacheAsync(function(err, top10, common) {
        if (err) {
          reject(err);
        }
        if (!err) {
          return resolve([top10, common]);
        }
      });
    });
  };
}).call(this); // eslint-disable-line no-invalid-this
