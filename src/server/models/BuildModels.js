// Generated by CoffeeScript 2.2.3
(function() {
  var Sequelize, buildModelsAsync, db, fs, models;

  models = {
    Game: null,
    Players: [],
    PlayerGames: []
  };

  db = require('./db');

  fs = require('fs');

  Sequelize = require('sequelize');

  buildModelsAsync = async function(paper, done) {
    var chainer2, dumpPaper, err, game, i, j, k, len, p, pg, playerGames, players, ref, ref1;
    try {
      game = (await db.Game.create({
        result: paper.result,
        date: paper.date,
        referee: paper.referee
      }));
      players = (await (async function() {
        var j, len, ref, results;
        ref = paper.players;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          p = ref[j];
          results.push((await db.Player.findOrCreate({
            where: {
              name: p.name
            }
          }).spread(function(player, wasCreated) {
            return player;
          })));
        }
        return results;
      })());
      chainer2 = new Sequelize.Utils.QueryChainer;
      playerGames = [];
      ref = paper.players;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        pg = (await db.PlayerGame.create({
          role: p.role,
          likes: p.likes,
          fouls: p.fouls,
          is_best: p.isBest,
          extra_scores: p.extraScores,
          took_best_move: paper['bestMoveAuthor'] === p.name ? true : false,
          best_move_accuracy: (paper.bestMoveAuthor != null) && paper.bestMoveAuthor === p.name ? paper.bestMoveAccuracy : 0,
          is_killed_first_at_night: paper['firstKilledAtNight'] === p.name ? true : false,
          is_killed_first_by_day: paper['firstKilledByDay'] === p.name ? true : false
        }));
        playerGames.push(pg);
      }
      for (i = k = 0, ref1 = playerGames.length; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {
        await playerGames[i].setGame(game);
        await playerGames[i].setPlayer(players[i]);
      }
      models.Game = game;
      models.Players = players;
      models.PlayerGames = playerGames;
      dumpPaper = function() {
        return new Promise(function(resolve, reject) {
          return fs.writeFile('paper.json', JSON.stringify(paper, null, 4), function(err) {
            if (err) {
              reject(err);
            }
            if (!err) {
              return resolve(paper);
            }
          });
        });
      };
      await dumpPaper();
      return done(null, models);
    } catch (error) {
      err = error;
      return done(err, null);
    }
  };

  module.exports = function(paper) {
    return new Promise(function(resolve, reject) {
      return buildModelsAsync(paper, function(err, models) {
        if (err) {
          reject(err);
        }
        if (!err) {
          return resolve(models);
        }
      });
    });
  };

}).call(this);
